<templateSet group="Go">
  <template name="b.err" value="logs.Error(&quot;[$PACKAGE$:$LOCATION$][$FUNCTION$] $ERROR$. Details: &quot;, $TRACER$)" description="beego error logs" toReformat="true" toShortenFQNames="true">
    <variable name="PACKAGE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="LOCATION" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="FUNCTION" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ERROR" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="TRACER" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="GO" value="true" />
    </context>
  </template>
  <template name="b.info" value="logs.Error(&quot;[$PACKAGE$:$LOCATION$][$FUNCTION$] $INFO$. Details: &quot;, $TRACER$)" description="beego info logs" toReformat="true" toShortenFQNames="true">
    <variable name="PACKAGE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="LOCATION" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="FUNCTION" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="INFO" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="TRACER" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="GO" value="true" />
    </context>
  </template>
  <template name="csuc" value="$CONTROLLER$.Data[&quot;json&quot;] = services.Response" description="controller response success" toReformat="true" toShortenFQNames="true">
    <variable name="CONTROLLER" expression="complete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="GO" value="true" />
    </context>
  </template>
  <template name="cerr" value="$CONTROLLER$.Data[&quot;json&quot;] = services.Response&#10;return" description="controller response error" toReformat="true" toShortenFQNames="true">
    <variable name="CONTROLLER" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="GO" value="true" />
    </context>
  </template>
  <template name="b.reqdec" value="defer $CONTROLLER$.ServeJSON()&#10;var reqObj ezrequest.$REQUEST_STRUCT$&#10;loadRequestErr := json.Unmarshal($CONTROLLER$.Ctx.Input.RequestBody, &amp;reqObj)&#10;if loadRequestErr != nil {&#10;&#9;logs.Error(&quot;[$PACKAGE$:$LOCATION$][$FUNCTION$] Cannot decode package. Details: &quot;, loadRequestErr.Error())&#10;&#9;$CONTROLLER$.Data[&quot;json&quot;] = ezresponse.ResError(ezerror.InvalidRequest)&#10;&#9;return&#10;}&#10;&#10;services := ezservices.$SERVICES${$REQUEST_STRUCT$:reqObj}&#10;services.$ACTION$&#10;$CONTROLLER$.Data[&quot;json&quot;] = services.Response" description="Decode request object" toReformat="true" toShortenFQNames="true">
    <variable name="CONTROLLER" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="REQUEST_STRUCT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PACKAGE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="LOCATION" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="FUNCTION" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="SERVICES" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ACTION" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="GO" value="true" />
    </context>
  </template>
  <template name="b.i64params" value="$OBJ$, getParamErr := $CONTROLLER$.GetInt64(&quot;:$PARAM$&quot;)&#10;&#9;if getParamErr != nil {&#10;&#9;&#9;logs.Error(&quot;[$PACKAGE$:$LOCATION$][$FUNCTION$] Cannot params $PARAM$. Details: &quot;, getParamErr.Error())&#10;&#9;&#9;jc.Data[&quot;json&quot;] = &amp;ResMessage{StatusCode: StatusCodeInvalidRequest, Message: StatusMessageInvalidRequest}&#10;&#9;&#9;return&#10;&#9;}" description="Get int64 params" toReformat="true" toShortenFQNames="true">
    <variable name="OBJ" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CONTROLLER" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAM" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PACKAGE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="LOCATION" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="FUNCTION" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="GO" value="true" />
    </context>
  </template>
  <template name="b.iparams" value="$OBJ$, getParamErr := strconv.Atoi(jc.Ctx.Input.Param(&quot;:$PARAMS$&quot;))&#10;&#9;if getParamErr != nil {&#10;&#9;&#9;logs.Error(&quot;[$PACKAGE$:$LOCATION$][$FUNCTION$] Cannot params $PARAM$. Details: &quot;, getParamErr.Error())&#10;&#9;&#9;jc.Data[&quot;json&quot;] = &amp;ResMessage{StatusCode: StatusCodeInvalidRequest, Message: StatusMessageInvalidRequest}&#10;&#9;&#9;return&#10;&#9;}" description="Get int params" toReformat="true" toShortenFQNames="true">
    <variable name="OBJ" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMS" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAM" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PACKAGE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="LOCATION" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="FUNCTION" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="GO" value="true" />
    </context>
  </template>
  <template name="b.aparams" value="$OBJ$, getParamErr := strconv.ParseInt(jc.GetString(&quot;:$PARAM$&quot;), 10, 64)&#10;&#9;if getParamErr != nil {&#10;&#9;&#9;logs.Error(&quot;[$PACKAGE$:$LOCATION$][$FUNCTION$] Cannot params $PARAM$. Details: &quot;, getParamErr.Error())&#10;&#9;&#9;jc.Data[&quot;json&quot;] = &amp;ResMessage{StatusCode: StatusCodeInvalidRequest, Message: StatusMessageInvalidRequest}&#10;&#9;&#9;return&#10;&#9;}" description="Get int64 params" toReformat="true" toShortenFQNames="true">
    <variable name="OBJ" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAM" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PACKAGE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="LOCATION" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="FUNCTION" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="GO" value="true" />
    </context>
  </template>
  <template name="b.fcmt" value="// $FUNC$ $DESC$&#10;// Status" description="" toReformat="false" toShortenFQNames="true">
    <variable name="FUNC" expression="classNameComplete()" defaultValue="" alwaysStopAt="true" />
    <variable name="DESC" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="GO" value="true" />
    </context>
  </template>
  <template name="func.r" value="func ($VAR$) $NAME$($ARGS$) $RETURN$ {&#10;    $BODY$&#10;}" description="func with receiver" toReformat="true" toShortenFQNames="true">
    <variable name="VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ARGS" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="RETURN" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="BODY" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="GO" value="true" />
    </context>
  </template>
  <template name="func.c" value="func ($VAR$) $NAME$() {&#10;defer $CONTROLLER$.ServeJSON()&#10;var reqObj ezrequest.$REQUEST_STRUCT$&#10;loadRequestErr := json.Unmarshal($CONTROLLER$.Ctx.Input.RequestBody, &amp;reqObj)&#10;if loadRequestErr != nil {&#10;&#9;logs.Error(&quot;[$PACKAGE$:$LOCATION$][$FUNCTION$] Cannot decode package. Details: &quot;, loadRequestErr.Error())&#10;&#9;$CONTROLLER$.Data[&quot;json&quot;] = ezresponse.ResError(ezerror.InvalidRequest)&#10;&#9;return&#10;}&#10;&#10;services := ezservices.$SERVICES${$REQUEST_STRUCT$:reqObj}&#10;services.$ACTION$&#10;$CONTROLLER$.Data[&quot;json&quot;] = services.Response&#10;}" description="controller function" toReformat="true" toShortenFQNames="true">
    <variable name="VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CONTROLLER" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="REQUEST_STRUCT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PACKAGE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="LOCATION" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="FUNCTION" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="SERVICES" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ACTION" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="GO" value="true" />
    </context>
  </template>
  <template name="serr" value="services.Response = *ezresponse.ResError($CODE$)" description="" toReformat="false" toShortenFQNames="true">
    <variable name="CODE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="GO" value="true" />
    </context>
  </template>
  <template name="ssuc" value="services.Response = *ezresponse.ResSuccess($DATA$)" description="" toReformat="false" toShortenFQNames="true">
    <variable name="DATA" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="GO" value="true" />
    </context>
  </template>
</templateSet>